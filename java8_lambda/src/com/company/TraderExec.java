package com.company;import java.util.Arrays;import java.util.Comparator;import java.util.List;import java.util.Optional;import java.util.OptionalInt;import java.util.function.Supplier;import java.util.stream.Collectors;import java.util.stream.IntStream;import java.util.stream.Stream;/** * @author:maslke * @date:11/4/2018 * @version:0.0.1 */public class TraderExec {    public static void main(String[] args) {        Trader raoul = new Trader("Raoul", "Cambridge");        Trader mario = new Trader("Mario", "Milan");        Trader alan = new Trader("Alan", "Cambridge");        Trader brian = new Trader("Brian", "Cambridge");        List<Transaction> transactions = Arrays.asList(                new Transaction(brian, 2011, 300),                new Transaction(raoul, 2012, 1000),                new Transaction(raoul, 2011, 400),                new Transaction(mario, 2012, 710),                new Transaction(mario, 2012, 700),                new Transaction(alan, 2012, 950)        );        //test1 查找2011所有的交易额,并按金额从小到大排序        List<Transaction> transactions2011 =                transactions.stream()                        .filter(t -> t.getYear() == 2011)                        .sorted(Comparator.comparing(Transaction::getValue))                        .collect(Collectors.toList());        //test2 交易员都在哪些城市工作过        List<String> citys = transactions.stream()                .map(Transaction::getTrader)                .map(Trader::getCity)                .distinct()                .collect(Collectors.toList());        //test3 查找所有来自剑桥的交易员,并按照姓名排序        List<Trader> cambridgeTraders = transactions.stream().map(Transaction::getTrader)                .filter(t -> "Cambridge".equals(t.getCity())).sorted(Comparator.comparing(Trader::getName))                .collect(Collectors.toList());        //test4 返回所有交易员的姓名字符串,并排序        List<String> names = cambridgeTraders.stream().map(Trader::getName).collect(Collectors.toList());        String name = cambridgeTraders.stream().map(Trader::getName).reduce("", (a, b) -> a + b);        //test5 有没有交易员在米兰工作        boolean existMilanTrader = transactions.stream().map(Transaction::getTrader)                .anyMatch(t -> "Milan".equals(t.getCity()));        //test6 打印在剑桥的交易员的交易额        transactions.stream().filter(t -> "Cambridge".equals(t.getTrader().getCity()))                .forEach(t -> {                    System.out.println(t.getValue());                });        //test7 所有交易额中,最高的交易额是多少        Optional<Transaction> value = transactions.stream().max(Comparator.comparing(Transaction::getValue));        int max = value.get().getValue();        //test7 2        OptionalInt maxValue = transactions.stream().mapToInt(Transaction::getValue).max();        // test8 找到交易额最小的交易        Optional<Transaction> transaction = transactions.stream()                .min(Comparator.comparing(Transaction::getValue));        Transaction minTran = transaction.get();        // a * a + b * b = c * c;        Stream<int[]> triples = IntStream.rangeClosed(1, 100).boxed()                .flatMap(a -> IntStream.rangeClosed(a, 100)                        .filter(b -> Math.sqrt(a * a + b * b) % 1 == 0)                        .mapToObj(b -> new int[]{a, b, (int)Math.sqrt(a * a + b * 2)}));        Stream<double[]> triples2 = IntStream.rangeClosed(1, 100).boxed()                .flatMap(a -> IntStream.rangeClosed(a, 100).mapToObj(b -> new double[]{a, b, Math.sqrt(a * a + b * b)}).filter(t -> t[2] % 1 == 0));        //        Stream<String> stream1 = Stream.of("Hello", "world");        Stream empty = Stream.empty();        Stream<Double> gen = Stream.generate(Math::random);    }}